// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSProcessCells
#pragma kernel CSInitializeCells

//------------------------ bitwise helpers
//returns true if bit at given position is 1, false if 0
bool CheckBit(const int data, const uint bitPosition)
{
	const int n = data >> bitPosition;
	return n & 1;
}

//set bit at given position in int to 1
//https://stackoverflow.com/questions/24250582/set-a-specific-bit-in-an-int
int SetBit(int data, const uint bitPosition)
{
	data |= 1 << bitPosition;
	return data;
}

//set bit at given position in int to 0
//https://stackoverflow.com/questions/24250582/set-a-specific-bit-in-an-ints
int ResetBit(int data, const uint bitPosition)
{
	data &= ~(1 << bitPosition);
	return data;
}
//------------------------

//shader variables
//set int c#
float _RandomSeed;
//amount of Bits in int
const uint IntBits = 32;

//grid variables
uint _Columns, _Rows, _Depth;

//cell variables
uint _CellCount;
RWStructuredBuffer<int> _Act;
RWStructuredBuffer<int> _Hum;
RWStructuredBuffer<int> _Cld;
RWStructuredBuffer<int> _ActNext;
RWStructuredBuffer<int> _HumNext;
RWStructuredBuffer<int> _CldNext;

//state variables
float _PActStart;
float _PHumStart;
float _PExt;
float _PHum;
float _PAct;
uint _WindStartGen;
uint _ExtStartGen;

//other
float _CellHeight;
//bottom Y of the CA to calculate wind speeds
float _CABottomPosition;
float _NormalWindSpeed;
RWStructuredBuffer<float3> _CloudPositions;
RWStructuredBuffer<int> _GenCounter;
//returns the amount of int in the cells buffer
uint GetBufferSize()
{
	//cells / bits per int
	return _CellCount / IntBits;
}

//https://www.shadertoy.com/view/XlXcW4
//float3 hash(float3 x)
//{
//    x = ((x >> 8U) ^ x.yzx) * _RandomSeed;
//    x = ((x >> 8U) ^ x.yzx) * _RandomSeed;
//    x = ((x >> 8U) ^ x.yzx) * _RandomSeed;

//    return float3(x) * (1.0 / float(0xffffffffU));
//}

//1d index to 3d index https://stackoverflow.com/questions/13894028/efficient-way-to-compute-3d-indexes-from-1d-array-representation
void OneDToThreeDIndex(uint cellIdx, out uint i, out uint j, out uint k)
{
	k = cellIdx / (_Columns * _Rows);
	cellIdx -= k * _Columns * _Rows;
	j = cellIdx / _Columns;
	cellIdx -= j * _Columns;
	i = cellIdx / 1;
}

//3d array index to 1d array index https://stackoverflow.com/questions/13894028/efficient-way-to-compute-3d-indexes-from-1d-array-representation
uint ThreeDToOneDIndex(const uint i, const uint j, const uint k)
{
	return i + j * _Columns + k * _Columns * _Rows;
}

//sets the bit to 0 or 1 in data at position
int SetBit(const int data, const uint bitPosition, const bool bit)
{
	if (bit)
		return SetBit(data, bitPosition);
	return ResetBit(data, bitPosition);
}

//from a cell index, gives the int index in the array and the bit index of this int
void GetBitPosition(const uint cellIdx, out uint intIdx, out uint bitIdx)
{
	intIdx = floor(cellIdx / 32.f);
	bitIdx = cellIdx - (intIdx * IntBits);
}

//returns the ACT state of a cell
bool IsActOfCell(const uint cellIdx)
{
	uint intIdx, bitIdx;
	GetBitPosition(cellIdx, intIdx, bitIdx);
	return CheckBit(_Act[intIdx], bitIdx);
}

bool GetActFromSurrounding(const uint cellIdx)
{
	uint cellIdxI, cellIdxJ, cellIdxK;
	OneDToThreeDIndex(cellIdx, cellIdxI, cellIdxJ, cellIdxK);

	return (cellIdxI + 1 < _Columns && IsActOfCell(ThreeDToOneDIndex(cellIdxI + 1, cellIdxJ, cellIdxK)))
		|| (cellIdxI > 0 && IsActOfCell(ThreeDToOneDIndex(cellIdxI - 1, cellIdxJ, cellIdxK)))

		|| (cellIdxJ + 1 < _Rows && IsActOfCell(ThreeDToOneDIndex(cellIdxI, cellIdxJ + 1, cellIdxK)))
		|| (cellIdxJ > 0 && IsActOfCell(ThreeDToOneDIndex(cellIdxI, cellIdxJ - 1, cellIdxK)))

		|| (cellIdxK + 1 < _Depth && IsActOfCell(ThreeDToOneDIndex(cellIdxI, cellIdxJ, cellIdxK + 1)))
		|| (cellIdxK > 0 && IsActOfCell(ThreeDToOneDIndex(cellIdxI, cellIdxJ, cellIdxK - 1)))

		|| (cellIdxI + 2 < _Columns && IsActOfCell(ThreeDToOneDIndex(cellIdxI + 2, cellIdxJ, cellIdxK)))
		|| (cellIdxI > 1 && IsActOfCell(ThreeDToOneDIndex(cellIdxI - 2, cellIdxJ, cellIdxK)))

		|| (cellIdxJ + 2 < _Rows && IsActOfCell(ThreeDToOneDIndex(cellIdxI, cellIdxJ + 2, cellIdxK)))
		|| (cellIdxJ > 1 && IsActOfCell(ThreeDToOneDIndex(cellIdxI, cellIdxJ - 2, cellIdxK)))

		|| (cellIdxK > 1 && IsActOfCell(ThreeDToOneDIndex(cellIdxI, cellIdxJ, cellIdxK - 2)));
}

//goes over the growth rules and sets the Next hum, act and cld according to these rules
void ProcessGrowthRules(const uint cellIdx)
{
	uint intIdx, bitIdx;
	GetBitPosition(cellIdx, intIdx, bitIdx);

	//the current states of the cell
	const bool currentAct = CheckBit(_Act[intIdx], bitIdx)
		, currentHum = CheckBit(_Hum[intIdx], bitIdx)
		, currentCld = CheckBit(_Cld[intIdx], bitIdx);

	//hum
	_HumNext[intIdx] = SetBit(_HumNext[intIdx], bitIdx
		, currentHum && !currentAct);

	//cld
	_CldNext[intIdx] = SetBit(_CldNext[intIdx], bitIdx
		, currentCld || currentAct);

	//act
	_ActNext[intIdx] = SetBit(_ActNext[intIdx], bitIdx
		, !currentAct && currentHum && GetActFromSurrounding(cellIdx));
}

//processes the extinction rules
void ProcessExtRules(const uint cellIdx)
{
	float rand = .001f; //TODO: this should get a rand number between 0 and 1
	uint intIdx, bitIdx;
	GetBitPosition(cellIdx, intIdx, bitIdx);

	const bool currentAct = CheckBit(_Act[intIdx], bitIdx)
		, currentHum = CheckBit(_Hum[intIdx], bitIdx)
		, currentCld = CheckBit(_Cld[intIdx], bitIdx);

	//hum
	_HumNext[intIdx] = SetBit(_Hum[intIdx], bitIdx, currentHum || rand < _PHum);

	//cld
	_CldNext[intIdx] = SetBit(_Cld[cellIdx], bitIdx, currentCld && rand > _PExt);

	//act
	_ActNext[intIdx] = SetBit(_Act[intIdx], bitIdx, currentAct || rand < _PAct);
}

//returns the cell height in the world
float GetCellHeightInWorld(const int cellIdxK)
{
	return _CABottomPosition + (float)cellIdxK * _CellHeight;
}

int WindSpeedCellDisplacementAtHeight()
{
	return 1;
}

//moves the clouds with the wind
void ProcessWind(const uint cellIdx)
{
	//i j k of cell for wind displacement
	uint cellIdxI, cellIdxJ, cellIdxK;
	OneDToThreeDIndex(cellIdx, cellIdxI, cellIdxJ, cellIdxK);

	//bit and int idx of cell
	uint intIdx, bitIdx;
	GetBitPosition(cellIdx, intIdx, bitIdx);

	//const float cellHeight = GetCellHeightInWorld(cellIdxK);
	const int cellDisplacementByWind = WindSpeedCellDisplacementAtHeight();

	if ((int)cellIdxI - cellDisplacementByWind >= 0)
	{
		const int cellIdxDisplacementByWind = ThreeDToOneDIndex(cellIdxI - cellDisplacementByWind, cellIdxJ, cellIdxK);

		//bit and int idx of wind cell
		uint intIdxWind, bitIdxWind;
		GetBitPosition(cellIdxDisplacementByWind, intIdxWind, bitIdxWind);

		//hum
		_HumNext[intIdx] = SetBit(_HumNext[intIdx], bitIdx, CheckBit(_Hum[intIdxWind], bitIdxWind));

		//cld
		_CldNext[intIdx] = SetBit(_CldNext[intIdx], bitIdx, CheckBit(_Cld[intIdxWind], bitIdxWind));

		//act
		_ActNext[intIdx] = SetBit(_ActNext[intIdx], bitIdx, CheckBit(_Act[intIdxWind], bitIdxWind));
	}
	else if (cellIdxI == 0)
	{
		_HumNext[intIdx] = SetBit(_HumNext[intIdx], bitIdx, false);
		_CldNext[intIdx] = SetBit(_CldNext[intIdx], bitIdx, false);
		_ActNext[intIdx] = SetBit(_ActNext[intIdx], bitIdx, false);
	}
}

//sets the position of a cell to the cloud positions if cld = 1 of this cell
void CloudPosition(const uint cellIdx)
{
	uint intIdx, bitIdx;
	GetBitPosition(cellIdx, intIdx, bitIdx);
	if (CheckBit(_Cld[intIdx], bitIdx)) //check if cld state is on
	{
		const float cellHalfHeight = _CellHeight / 2.f;
		uint cellIdxI, cellIdxJ, cellIdxK;
		OneDToThreeDIndex(cellIdx, cellIdxI, cellIdxJ, cellIdxK);
		//save the position of the cell to cloudPositions
		const float3 cloudPos = float3(
			(float)cellIdxI + cellHalfHeight,
			(float)cellIdxJ + cellHalfHeight,
			(float)cellIdxK + cellHalfHeight);

		_CloudPositions[cellIdx] = cloudPos;
	}
	else
	{
		//set the position of the cell to somewhere out of view
		//would be better to just not draw the cell, but i don't know how I could do that
		_CloudPositions[cellIdx] = float3(-100, -1, -1);
	}
}

//Sets the initial values of Hum and Act according to their start probabilities
void SetInitialValues(const uint cellIdx)
{
	uint intIdx, bitIdx;

	GetBitPosition(cellIdx, intIdx, bitIdx);

	const float rand = .0001f; //TODO: this should get a rand number between 0 and 1
	const bool humAtStart = rand <= _PHumStart;

	_Hum[intIdx] = SetBit(_Hum[intIdx], bitIdx, humAtStart);
	if (!humAtStart)
		_Act[intIdx] = SetBit(_Act[intIdx], bitIdx, rand <= _PActStart);
}

//processes the cells, does the state transition functions
[numthreads(1, 1, 1)]
void CSProcessCells(uint3 id : SV_DispatchThreadID)
{
	if (_GenCounter[0] == 0)
	{
		for (uint cellIdx = 0; cellIdx < _CellCount; cellIdx++)
			SetInitialValues(cellIdx);
	}

	for (uint cellIdx = 0; cellIdx < _CellCount; cellIdx++)
	{
		 ProcessGrowthRules(cellIdx);
		if(_GenCounter[0] >= _ExtStartGen)	ProcessExtRules(cellIdx);
		 if (_GenCounter[0] >= _WindStartGen) ProcessWind(cellIdx);

		 CloudPosition(cellIdx);
	}

	_GenCounter[0]++;


	//setting current states to next states
	for(uint intIdx = 0; intIdx<_CellCount*32;intIdx++)
	{
		_Cld[intIdx] = _CldNext[intIdx];
		_Hum[intIdx] = _HumNext[intIdx];
		_Act[intIdx] = _ActNext[intIdx];
	}

	//this wouldn't work
	//_Act = _ActNext;
	//_Hum = _HumNext;
	//_Cld = _CldNext;

}

//Initializes the cells, sets the states of the cell at t = 0
[numthreads(1, 1, 1)]
void CSInitializeCells(uint3 id : SV_DispatchThreadID)
{
	//SetInitialValues();
}